{"version":3,"sources":["pages/UserRepos.js","App.js","serviceWorker.js","index.js"],"names":["UserRepos","props","handleOnChange","event","target","name","value","setState","handleSubmit","state","username","repository","preventDefault","axios","get","then","response","contributors","data","forEach","contributor","push","login","url","html_url","clearSearch","this","className","length","map","key","href","onSubmit","htmlFor","type","id","onChange","placeholder","required","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sTAmFeA,E,kDA/Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,eAAiB,SAACC,GAAW,IAAD,EACFA,EAAMC,OAAtBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACd,EAAKC,SAAL,eACGF,EAAM,CAACC,MAZO,EAgBnBE,aAAe,SAACL,GAAW,IAAD,EACS,EAAKM,MAA9BC,EADgB,EAChBA,SAAUC,EADM,EACNA,WAClBR,EAAMS,iBACNC,IAAMC,IAAN,uCAA0CJ,EAA1C,YAAsDC,EAAtD,kBACCI,MAAM,SAAAC,GACL,IAAIC,EAAe,GACnBD,EAASE,KAAKC,SAAQ,SAAAC,GACpBH,EAAaI,KAAK,CAACX,SAAUU,EAAYE,MAAOC,IAAKH,EAAYI,cAEnE,EAAKjB,SAAS,CACZU,aAAcA,QA1BD,EA+BnBQ,YAAc,SAACtB,GACbA,EAAMS,iBACN,EAAKL,SAAS,CACZU,aAAc,MAhChB,EAAKR,MAAQ,CACXC,SAAU,GACVC,WAAY,GACZM,aAAc,IALC,E,qDAsCT,IAAD,EACwCS,KAAKjB,MAA5CE,EADD,EACCA,WAAYD,EADb,EACaA,SAAUO,EADvB,EACuBA,aAC9B,OACE,oCACE,6BACE,wBAAIU,UAAU,SAAd,yBAEF,yBAAKA,UAAU,eACb,6BAASA,UAAU,gBAEjBV,EAAaW,OAASX,EAAaY,KAAI,SAACT,GACtC,OACE,yBAAKU,IAAKV,EAAYV,UACpB,4BACE,4BACE,uBAAGqB,KAAMX,EAAYG,KAAMH,EAAYV,gBAOjD,oCACE,iCACE,0BAAMsB,SAAUN,KAAKlB,aAAcmB,UAAU,qBAC3C,2BAAOM,QAAQ,YAAf,6BACA,2BAAOC,KAAK,OAAOC,GAAG,WAAWC,SAAUV,KAAKxB,eAAgBI,MAAOI,EAAUL,KAAK,WAAWgC,YAAY,WAAWC,UAAQ,IAChI,2BAAOL,QAAQ,cAAf,cACA,2BAAOC,KAAK,OAAOC,GAAG,aAAaC,SAAUV,KAAKxB,eAAgBI,MAAOK,EAAYN,KAAK,aAAagC,YAAY,aAAYC,UAAQ,IACvI,4BAAQJ,KAAK,SAASP,UAAU,UAAhC,oB,GApEMY,aCYTC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCEcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a14025a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass UserRepos extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      repository: '',\n      contributors: []\n    }\n  };\n\n  handleOnChange = (event) => {\n    const { name, value } = event.target; \n    this.setState({\n      [name]:[value]\n    })\n  }\n\n  handleSubmit = (event) => {\n    const { username, repository } = this.state;\n    event.preventDefault();\n    axios.get(`https://api.github.com/repos/${username}/${repository}/contributors`)\n    .then (response => {\n      let contributors = [];\n      response.data.forEach(contributor => {\n        contributors.push({username: contributor.login, url: contributor.html_url})\n      })\n      this.setState({\n        contributors: contributors\n      })\n    });\n  }\n\n  clearSearch = (event) => {\n    event.preventDefault();\n    this.setState({\n      contributors: []\n    })\n  }\n\n  render() {\n    const { repository, username, contributors } = this.state;\n    return (\n      <>\n        <div>  \n          <h2 className=\"title\">List of contributors</h2>\n        </div>\n        <div className=\"main-screen\">\n          <section className=\"main-section\">\n          {\n            contributors.length ? contributors.map((contributor) => {\n              return (\n                <div key={contributor.username}>\n                  <ul>\n                    <li>\n                      <a href={contributor.url}>{contributor.username}</a>\n                    </li>\n                  </ul>\n                </div>\n              )\n            })\n            : \n            <>\n              <section>\n                <form onSubmit={this.handleSubmit} className=\"search-user-repos\">\n                  <label htmlFor=\"username\">Repository owner username</label>\n                  <input type=\"text\" id='username' onChange={this.handleOnChange} value={username} name='username' placeholder=\"Username\" required/>\n                  <label htmlFor=\"repository\">Repository</label>\n                  <input type=\"text\" id='repository' onChange={this.handleOnChange} value={repository} name='repository' placeholder=\"Repository\"required/>\n                  <button type=\"submit\" className=\"button\">Search</button>\n                </form>\n              </section>\n            </>\n          }\n          </section>\n        </div>\n      </>\n    )\n  };\n};\n\nexport default UserRepos;","import React from 'react';\n\nimport 'milligram';\nimport './App.css';\n\nimport UserRepos from './pages/UserRepos';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserRepos />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}